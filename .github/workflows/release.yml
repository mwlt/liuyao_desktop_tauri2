name: "发布新版本"

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '版本号（例如: 2.6.9）'
        required: true
        type: string
      draft:
        description: '是否创建为草稿'
        required: false
        type: boolean
        default: true
      prerelease:
        description: '是否为预发布版本'
        required: false
        type: boolean
        default: false

jobs:
  # 创建 Release
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Determine version
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="v${{ github.event.inputs.version }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_draft=${{ github.event.inputs.draft }}" >> $GITHUB_OUTPUT
            echo "is_prerelease=${{ github.event.inputs.prerelease }}" >> $GITHUB_OUTPUT
          else
            VERSION="${{ github.ref_name }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_draft=true" >> $GITHUB_OUTPUT
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi
          echo "📌 版本号: $VERSION"
        shell: bash
      
      - name: Create Release
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          # 定义 Release 内容
          RELEASE_BODY=$(cat << 'EOF'
          ## 🎉 六爻排盘与研究 ${{ steps.get-version.outputs.version }} 发布

          ### 📦 支持平台
          - **Windows**: MSI 安装包、NSIS 安装程序、便携版
          - **macOS**: Intel 专用版、Apple Silicon 专用版 (DMG格式)
          - **Linux**: DEB包、RPM包、AppImage 便携版

          ### 🔽 下载说明
          - **Windows 用户**: 
            - 安装版：下载 `.msi` 或 `.exe` 文件
            - 便携版：下载 `.zip` 文件
          - **macOS 用户**: 
            - Intel Mac: 下载包含 `intel` 的 `.dmg` 文件
            - Apple Silicon Mac: 下载包含 `apple_silicon` 的 `.dmg` 文件  
          - **Linux 用户**: 
            - Ubuntu/Debian: 下载 `.deb` 文件
            - RHEL/CentOS/Fedora: 下载 `.rpm` 文件
            - 其他发行版: 下载 `.AppImage` 文件
          EOF
          )
          
          # 创建 Release
          RESPONSE=$(gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/releases \
            -f tag_name='${{ steps.get-version.outputs.version }}' \
            -f name='六爻排盘与研究 ${{ steps.get-version.outputs.version }}' \
            -f body="$RELEASE_BODY" \
            -F draft=${{ steps.get-version.outputs.is_draft == 'true' }} \
            -F prerelease=${{ steps.get-version.outputs.is_prerelease == 'true' }})
          
          # 提取 release ID 和 upload URL
          RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id')
          UPLOAD_URL=$(echo "$RESPONSE" | jq -r '.upload_url')
          
          # 设置输出
          echo "id=$RELEASE_ID" >> $GITHUB_OUTPUT
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT
          
          echo "✅ Release 创建成功！"
          echo "📌 Release ID: $RELEASE_ID"
          echo "📤 Upload URL: $UPLOAD_URL"

  # 构建并上传
  build-and-upload:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows 64位
          - platform: windows-latest
            os: windows
            arch: x86_64
            rust-target: x86_64-pc-windows-msvc
            artifact-name: windows-x64

          # Linux 64位
          - platform: ubuntu-22.04
            os: linux
            arch: x86_64
            rust-target: x86_64-unknown-linux-gnu
            artifact-name: linux-x64

          # macOS Intel 版本
          - platform: macos-latest
            os: macos
            arch: x86_64
            rust-target: x86_64-apple-darwin
            artifact-name: macos-intel

          # macOS Apple Silicon 版本
          - platform: macos-latest
            os: macos
            arch: aarch64
            rust-target: aarch64-apple-darwin
            artifact-name: macos-arm64

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Install frontend dependencies
        run: pnpm install

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}

      # 构建 Tauri 应用
      - name: Build Tauri app
        run: pnpm tauri build --target ${{ matrix.rust-target }}

      # 重命名构建产物
      - name: Rename artifacts
        shell: bash
        run: |
          echo "🔄 开始重命名 ${{ matrix.os }} 构建产物..."
          
          # 定义目标目录
          target_dir="src-tauri/target/${{ matrix.rust-target }}/release/bundle"
          
          # 设置操作系统和架构后缀
          case "${{ matrix.os }}" in
            "windows")
              os_suffix="_windows_x64"
              ;;
            "linux")
              os_suffix="_linux_x64"
              ;;
            "macos")
              if [ "${{ matrix.arch }}" = "x86_64" ]; then
                os_suffix="_macos_intel"
              else
                os_suffix="_macos_apple_silicon"
              fi
              ;;
          esac
          
          echo "📝 使用后缀: $os_suffix"
          
          # Windows 产物重命名
          if [ "${{ matrix.os }}" = "windows" ]; then
            # MSI 文件
            if [ -d "$target_dir/msi" ]; then
              cd "$target_dir/msi"
              for file in *.msi; do
                if [ -f "$file" ]; then
                  base="${file%_*}"
                  new_name="${base}${os_suffix}.msi"
                  mv "$file" "$new_name" 2>/dev/null || true
                  echo "✅ 重命名: $file -> $new_name"
                fi
              done
              cd - > /dev/null
            fi
            
            # NSIS 文件
            if [ -d "$target_dir/nsis" ]; then
              cd "$target_dir/nsis"
              for file in *.exe; do
                if [ -f "$file" ]; then
                  # 处理 setup.exe 格式
                  if [[ "$file" == *-setup.exe ]]; then
                    base="${file%-setup.exe}"
                    new_name="${base}${os_suffix}-setup.exe"
                  else
                    base="${file%.exe}"
                    new_name="${base}${os_suffix}.exe"
                  fi
                  mv "$file" "$new_name" 2>/dev/null || true
                  echo "✅ 重命名: $file -> $new_name"
                fi
              done
              cd - > /dev/null
            fi
          fi
          
          # macOS 产物重命名
          if [ "${{ matrix.os }}" = "macos" ]; then
            # DMG 文件
            if [ -d "$target_dir/dmg" ]; then
              cd "$target_dir/dmg"
              for file in *.dmg; do
                if [ -f "$file" ]; then
                  base="${file%.dmg}"
                  new_name="${base}${os_suffix}.dmg"
                  mv "$file" "$new_name" 2>/dev/null || true
                  echo "✅ 重命名: $file -> $new_name"
                fi
              done
              cd - > /dev/null
            fi
          fi
          
          # Linux 产物重命名
          if [ "${{ matrix.os }}" = "linux" ]; then
            # DEB 文件
            if [ -d "$target_dir/deb" ]; then
              cd "$target_dir/deb"
              for file in *.deb; do
                if [ -f "$file" ]; then
                  # 处理 _amd64.deb 格式
                  if [[ "$file" == *_amd64.deb ]]; then
                    base="${file%_amd64.deb}"
                    new_name="${base}${os_suffix}.deb"
                  else
                    base="${file%.deb}"
                    new_name="${base}${os_suffix}.deb"
                  fi
                  mv "$file" "$new_name" 2>/dev/null || true
                  echo "✅ 重命名: $file -> $new_name"
                fi
              done
              cd - > /dev/null
            fi
            
            # RPM 文件
            if [ -d "$target_dir/rpm" ]; then
              cd "$target_dir/rpm"
              for file in *.rpm; do
                if [ -f "$file" ]; then
                  base="${file%.rpm}"
                  new_name="${base}${os_suffix}.rpm"
                  mv "$file" "$new_name" 2>/dev/null || true
                  echo "✅ 重命名: $file -> $new_name"
                fi
              done
              cd - > /dev/null
            fi
            
            # AppImage 文件
            if [ -d "$target_dir/appimage" ]; then
              cd "$target_dir/appimage"
              for file in *.AppImage; do
                if [ -f "$file" ]; then
                  # 处理 _amd64.AppImage 格式
                  if [[ "$file" == *_amd64.AppImage ]]; then
                    base="${file%_amd64.AppImage}"
                    new_name="${base}${os_suffix}.AppImage"
                  else
                    base="${file%.AppImage}"
                    new_name="${base}${os_suffix}.AppImage"
                  fi
                  mv "$file" "$new_name" 2>/dev/null || true
                  echo "✅ 重命名: $file -> $new_name"
                fi
              done
              cd - > /dev/null
            fi
          fi
          
          echo "✨ 重命名完成！"

      # Windows 便携版构建
      - name: Build Windows Portable Version
        if: matrix.os == 'windows'
        shell: pwsh
        run: |
          cd src-tauri
          .\scripts\build-portable.ps1
          
          # 重命名便携版文件
          $portableDir = "target/portable"
          if (Test-Path $portableDir) {
            Get-ChildItem -Path $portableDir -Filter "*.zip" | ForEach-Object {
              $oldName = $_.Name
              if ($oldName -match "liuyao-desktop-portable-v(.+)\.zip") {
                $version = $matches[1]
                $newName = "liuyao-desktop-portable-v${version}_windows_x64.zip"
                $newPath = Join-Path $portableDir $newName
                Move-Item $_.FullName $newPath -Force
                Write-Host "✅ 便携版重命名: $oldName -> $newName"
              }
            }
          }

      # 创建 macOS APP 压缩包
      - name: Create macOS APP archive
        if: matrix.os == 'macos'
        shell: bash
        run: |
          app_dir="src-tauri/target/${{ matrix.rust-target }}/release/bundle/macos"
          if [ -d "$app_dir" ]; then
            cd "$app_dir"
            
            # 设置架构后缀
            if [ "${{ matrix.arch }}" = "x86_64" ]; then
              os_suffix="_macos_intel"
            else
              os_suffix="_macos_apple_silicon"
            fi
            
            for app in *.app; do
              if [ -d "$app" ]; then
                # 获取应用名称（不包含 .app）
                app_name="${app%.app}"
                archive_name="${app_name}${os_suffix}.app.tar.gz"
                tar -czf "$archive_name" "$app"
                echo "✅ 创建压缩包: $archive_name"
              fi
            done
          fi

      # 收集所有构建产物
      - name: Collect artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          
          # 定义目标目录
          target_dir="src-tauri/target/${{ matrix.rust-target }}/release/bundle"
          
          # Windows 产物
          if [ "${{ matrix.os }}" = "windows" ]; then
            # MSI
            find "$target_dir/msi" -name "*.msi" -type f -exec cp {} artifacts/ \; 2>/dev/null || true
            # NSIS
            find "$target_dir/nsis" -name "*.exe" -type f -exec cp {} artifacts/ \; 2>/dev/null || true
            # 便携版
            find "src-tauri/target/portable" -name "*.zip" -type f -exec cp {} artifacts/ \; 2>/dev/null || true
          fi
          
          # macOS 产物
          if [ "${{ matrix.os }}" = "macos" ]; then
            # DMG
            find "$target_dir/dmg" -name "*.dmg" -type f -exec cp {} artifacts/ \; 2>/dev/null || true
            # APP tar.gz
            find "$target_dir/macos" -name "*.app.tar.gz" -type f -exec cp {} artifacts/ \; 2>/dev/null || true
          fi
          
          # Linux 产物
          if [ "${{ matrix.os }}" = "linux" ]; then
            # DEB
            find "$target_dir/deb" -name "*.deb" -type f -exec cp {} artifacts/ \; 2>/dev/null || true
            # RPM
            find "$target_dir/rpm" -name "*.rpm" -type f -exec cp {} artifacts/ \; 2>/dev/null || true
            # AppImage
            find "$target_dir/appimage" -name "*.AppImage" -type f -exec cp {} artifacts/ \; 2>/dev/null || true
          fi
          
          echo "📦 收集到的产物："
          ls -la artifacts/

      # 上传产物到 GitHub Actions Artifacts（用于调试）
      - name: Upload artifacts to GitHub Actions
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: artifacts/*
          retention-days: 1

      # 上传产物到 Release (Windows)
      - name: Upload Release Assets (Windows)
        if: matrix.os == 'windows'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        shell: pwsh
        run: |
          $uploadUrl = "${{ needs.create-release.outputs.upload_url }}"
          $uploadUrl = $uploadUrl -replace '\{.*\}', ''
          
          Get-ChildItem -Path "artifacts" -File | ForEach-Object {
            $filename = $_.Name
            $filepath = $_.FullName
            Write-Host "📤 上传: $filename"
            
            # 获取 MIME 类型
            $mime = switch -Regex ($filename) {
              '\.msi$' { "application/x-msi" }
              '\.exe$' { "application/x-msdownload" }
              '\.zip$' { "application/zip" }
              default { "application/octet-stream" }
            }
            
            # 使用 curl 上传文件
            $headers = @{
              "Authorization" = "token $env:GITHUB_TOKEN"
              "Content-Type" = $mime
            }
            
            $uri = "${uploadUrl}?name=${filename}"
            Invoke-RestMethod -Uri $uri -Method Post -Headers $headers -InFile $filepath
          }

      # 上传产物到 Release (Unix)
      - name: Upload Release Assets (Unix)
        if: matrix.os != 'windows'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        shell: bash
        run: |
          upload_url="${{ needs.create-release.outputs.upload_url }}"
          
          # 遍历 artifacts 目录中的所有文件
          for file in artifacts/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "📤 上传: $filename"
              
              # 获取 MIME 类型
              case "${filename##*.}" in
                dmg) mime="application/x-apple-diskimage" ;;
                gz) mime="application/gzip" ;;
                deb) mime="application/vnd.debian.binary-package" ;;
                rpm) mime="application/x-rpm" ;;
                AppImage) mime="application/x-executable" ;;
                *) mime="application/octet-stream" ;;
              esac
              
              # 使用 curl 上传文件
              curl -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: $mime" \
                --data-binary "@$file" \
                "${upload_url%\{*}?name=$filename"
            fi
          done

      # 失败时上传日志
      - name: Upload build logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.artifact-name }}
          path: |
            src-tauri/target/**/build.log
            src-tauri/target/**/cargo-build.log
          if-no-files-found: ignore
          retention-days: 7