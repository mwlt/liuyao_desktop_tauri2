name: Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: write
  pull-requests: write

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS Intel 专用版本
          - platform: macos-13  # Intel 运行器
            os: macos
            arch: x86_64
            rust-target: x86_64-apple-darwin
            name-suffix: "_intel"
          
          # macOS Apple Silicon 专用版本
          - platform: macos-latest  # Apple Silicon 运行器
            os: macos
            arch: aarch64
            rust-target: aarch64-apple-darwin
            name-suffix: "_apple_silicon"
          
          # macOS 通用版本 (Universal Binary)
          - platform: macos-latest
            os: macos
            arch: universal
            rust-target: ""
            name-suffix: "_universal"
          
          # Linux 版本
          - platform: ubuntu-22.04
            os: linux
            arch: x86_64
            rust-target: x86_64-unknown-linux-gnu
            name-suffix: "_x86_64"
          
          # Windows 版本
          - platform: windows-latest
            os: windows
            arch: x86_64
            rust-target: x86_64-pc-windows-msvc
            name-suffix: "_x86_64"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: |
            aarch64-apple-darwin
            x86_64-apple-darwin
            x86_64-unknown-linux-gnu
            i686-unknown-linux-gnu
            aarch64-unknown-linux-gnu
            armv7-unknown-linux-gnueabihf
            x86_64-pc-windows-msvc
            i686-pc-windows-msvc
            aarch64-pc-windows-msvc

      - name: Install dependencies (ubuntu only)
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update
          # 安装完整的构建依赖
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            libasound2-dev \
            libssl-dev \
            libdbus-1-dev \
            libfreetype6-dev \
            libexpat1-dev \
            libxcb-composite0-dev \
            libxrandr-dev \
            libxss-dev \
            libxtst-dev \
            libxcb1-dev

      - name: Install frontend dependencies
        run: pnpm install

      - name: Setup macOS Universal Binary (macOS Universal only)
        if: matrix.arch == 'universal'
        run: |
          echo "Building macOS Universal Binary"
          # 确保 Rust 目标已安装
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          # 禁用 macOS 代码签名（适用于开源项目）
          # 如需启用代码签名，请在 GitHub Secrets 中配置相应证书
          ENABLE_CODE_SIGNING: false
        with:
          args: ${{ matrix.rust-target != '' && format('--target {0}', matrix.rust-target) || '' }}
          tagName: ${{ github.ref_name }}
          releaseName: '六爻排盘与研究 v${{ github.ref_name }}'
          releaseBody: '六爻排盘与研究 ${{ github.ref_name }} 发布 - 支持 Windows、macOS、Linux 多平台'
          releaseDraft: true
          prerelease: false
          includeUpdaterJson: false
          includeRelease: true
          includeDebug: false

      # 统一重命名步骤：为所有平台的构建产物添加操作系统和架构标识
      - name: Rename artifacts with OS and architecture identifiers
        shell: bash
        run: |
          echo "🔄 开始重命名 ${{ matrix.os }} 构建产物..."
          
          # 设置操作系统标识
          case "${{ matrix.os }}" in
            "macos")
              os_suffix="_macos"
              ;;
            "windows")
              os_suffix="_windows"
              ;;
            "linux")
              os_suffix="_linux"
              ;;
            *)
              os_suffix="_${{ matrix.os }}"
              ;;
          esac
          
          # 组合完整后缀：操作系统 + 架构
          if [ -n "${{ matrix.name-suffix }}" ]; then
            full_suffix="${os_suffix}${{ matrix.name-suffix }}"
          else
            full_suffix="${os_suffix}_${{ matrix.arch }}"
          fi
          
          echo "📝 使用后缀: $full_suffix"
          
          # macOS 文件重命名
          if [ "${{ matrix.os }}" = "macos" ]; then
            # 处理 DMG 文件
            dmg_dir="src-tauri/target/release/bundle/dmg"
            if [ -d "$dmg_dir" ]; then
              cd "$dmg_dir"
              echo "📁 DMG 目录: $(pwd)"
              echo "📋 DMG 构建前文件列表:"
              ls -la *.dmg 2>/dev/null || echo "未找到 DMG 文件"
              
              for file in *.dmg; do
                if [ -f "$file" ] && [[ "$file" != *"$full_suffix"* ]]; then
                  base_name="${file%.*}"
                  extension="${file##*.}"
                  new_name="${base_name}${full_suffix}.${extension}"
                  mv "$file" "$new_name"
                  echo "✅ DMG 重命名: $file -> $new_name"
                fi
              done
              
              echo "📋 DMG 重命名后文件列表:"
              ls -la *.dmg 2>/dev/null || echo "未找到 DMG 文件"
            fi
            
            # 处理 APP 文件
            app_dir="src-tauri/target/release/bundle/macos"
            if [ -d "$app_dir" ]; then
              cd "$app_dir"
              echo "📁 APP 目录: $(pwd)"
              echo "📋 APP 构建前文件列表:"
              ls -la *.app* 2>/dev/null || echo "未找到 APP 文件"
              
              for file in *.app*; do
                if [ -f "$file" ] && [[ "$file" != *"$full_suffix"* ]]; then
                  if [[ "$file" == *.app.tar.gz ]]; then
                    base_name="${file%.app.tar.gz}"
                    new_name="${base_name}${full_suffix}.app.tar.gz"
                  elif [[ "$file" == *.app ]]; then
                    base_name="${file%.app}"
                    new_name="${base_name}${full_suffix}.app"
                  else
                    base_name="${file%.*}"
                    extension="${file##*.}"
                    new_name="${base_name}${full_suffix}.${extension}"
                  fi
                  mv "$file" "$new_name"
                  echo "✅ APP 重命名: $file -> $new_name"
                fi
              done
              
              echo "📋 APP 重命名后文件列表:"
              ls -la *.app* 2>/dev/null || echo "未找到 APP 文件"
            fi
          fi
          
          # Windows 文件重命名
          if [ "${{ matrix.os }}" = "windows" ]; then
            # 处理 MSI 文件
            msi_dir="src-tauri/target/release/bundle/msi"
            if [ -d "$msi_dir" ]; then
              cd "$msi_dir"
              echo "📁 MSI 目录: $(pwd)"
              echo "📋 MSI 构建前文件列表:"
              ls -la *.msi 2>/dev/null || echo "未找到 MSI 文件"
              
              for file in *.msi; do
                if [ -f "$file" ] && [[ "$file" != *"$full_suffix"* ]]; then
                  base_name="${file%.*}"
                  extension="${file##*.}"
                  new_name="${base_name}${full_suffix}.${extension}"
                  mv "$file" "$new_name"
                  echo "✅ MSI 重命名: $file -> $new_name"
                fi
              done
              
              echo "📋 MSI 重命名后文件列表:"
              ls -la *.msi 2>/dev/null || echo "未找到 MSI 文件"
            fi
            
            # 处理 NSIS 文件
            nsis_dir="src-tauri/target/release/bundle/nsis"
            if [ -d "$nsis_dir" ]; then
              cd "$nsis_dir"
              echo "📁 NSIS 目录: $(pwd)"
              echo "📋 NSIS 构建前文件列表:"
              ls -la *.exe 2>/dev/null || echo "未找到 EXE 文件"
              
              for file in *.exe; do
                if [ -f "$file" ] && [[ "$file" != *"$full_suffix"* ]]; then
                  base_name="${file%.*}"
                  extension="${file##*.}"
                  new_name="${base_name}${full_suffix}.${extension}"
                  mv "$file" "$new_name"
                  echo "✅ NSIS 重命名: $file -> $new_name"
                fi
              done
              
              echo "📋 NSIS 重命名后文件列表:"
              ls -la *.exe 2>/dev/null || echo "未找到 EXE 文件"
            fi
            
            # 处理便携版 ZIP 文件
            portable_dir="src-tauri/target/release/bundle/portable"
            if [ -d "$portable_dir" ]; then
              cd "$portable_dir"
              echo "📁 便携版目录: $(pwd)"
              echo "📋 便携版构建前文件列表:"
              ls -la *.zip 2>/dev/null || echo "未找到 ZIP 文件"
              
              for file in *.zip; do
                if [ -f "$file" ] && [[ "$file" != *"$full_suffix"* ]]; then
                  base_name="${file%.*}"
                  extension="${file##*.}"
                  new_name="${base_name}${full_suffix}.${extension}"
                  mv "$file" "$new_name"
                  echo "✅ 便携版重命名: $file -> $new_name"
                fi
              done
              
              echo "📋 便携版重命名后文件列表:"
              ls -la *.zip 2>/dev/null || echo "未找到 ZIP 文件"
            fi
          fi
          
          # Linux 文件重命名
          if [ "${{ matrix.os }}" = "linux" ]; then
            # 处理 DEB 文件
            deb_dir="src-tauri/target/release/bundle/deb"
            if [ -d "$deb_dir" ]; then
              cd "$deb_dir"
              echo "📁 DEB 目录: $(pwd)"
              echo "📋 DEB 构建前文件列表:"
              ls -la *.deb 2>/dev/null || echo "未找到 DEB 文件"
              
              for file in *.deb; do
                if [ -f "$file" ] && [[ "$file" != *"$full_suffix"* ]]; then
                  base_name="${file%.*}"
                  extension="${file##*.}"
                  new_name="${base_name}${full_suffix}.${extension}"
                  mv "$file" "$new_name"
                  echo "✅ DEB 重命名: $file -> $new_name"
                fi
              done
              
              echo "📋 DEB 重命名后文件列表:"
              ls -la *.deb 2>/dev/null || echo "未找到 DEB 文件"
            fi
            
            # 处理 RPM 文件
            rpm_dir="src-tauri/target/release/bundle/rpm"
            if [ -d "$rpm_dir" ]; then
              cd "$rpm_dir"
              echo "📁 RPM 目录: $(pwd)"
              echo "📋 RPM 构建前文件列表:"
              ls -la *.rpm 2>/dev/null || echo "未找到 RPM 文件"
              
              for file in *.rpm; do
                if [ -f "$file" ] && [[ "$file" != *"$full_suffix"* ]]; then
                  base_name="${file%.*}"
                  extension="${file##*.}"
                  new_name="${base_name}${full_suffix}.${extension}"
                  mv "$file" "$new_name"
                  echo "✅ RPM 重命名: $file -> $new_name"
                fi
              done
              
              echo "📋 RPM 重命名后文件列表:"
              ls -la *.rpm 2>/dev/null || echo "未找到 RPM 文件"
            fi
            
            # 处理 AppImage 文件
            appimage_dir="src-tauri/target/release/bundle/appimage"
            if [ -d "$appimage_dir" ]; then
              cd "$appimage_dir"
              echo "📁 AppImage 目录: $(pwd)"
              echo "📋 AppImage 构建前文件列表:"
              ls -la *.AppImage 2>/dev/null || echo "未找到 AppImage 文件"
              
              for file in *.AppImage; do
                if [ -f "$file" ] && [[ "$file" != *"$full_suffix"* ]]; then
                  base_name="${file%.*}"
                  extension="${file##*.}"
                  new_name="${base_name}${full_suffix}.${extension}"
                  mv "$file" "$new_name"
                  echo "✅ AppImage 重命名: $file -> $new_name"
                fi
              done
              
              echo "📋 AppImage 重命名后文件列表:"
              ls -la *.AppImage 2>/dev/null || echo "未找到 AppImage 文件"
            fi
          fi
          
          echo "✨ ${{ matrix.os }} 文件重命名完成！"

      - name: Build Windows Portable Version
        if: matrix.os == 'windows'
        shell: pwsh
        run: |
          cd src-tauri
          .\scripts\build-portable.ps1

      - name: Upload all artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ matrix.os == 'linux' && 'src-tauri/target/release/bundle/deb/liuyao-desktop*_linux*.deb' || '' }}
            ${{ matrix.os == 'linux' && 'src-tauri/target/release/bundle/rpm/liuyao-desktop*_linux*.rpm' || '' }}
            ${{ matrix.os == 'linux' && 'src-tauri/target/release/bundle/appimage/liuyao-desktop*_linux*.AppImage' || '' }}
            ${{ matrix.os == 'windows' && 'src-tauri/target/release/bundle/msi/liuyao-desktop*_windows*.msi' || '' }}
            ${{ matrix.os == 'windows' && 'src-tauri/target/release/bundle/nsis/liuyao-desktop*_windows*.exe' || '' }}
            ${{ matrix.os == 'windows' && 'src-tauri/target/release/bundle/portable/liuyao-desktop*_windows*.zip' || '' }}
            ${{ matrix.os == 'macos' && 'src-tauri/target/release/bundle/dmg/liuyao-desktop*_macos*.dmg' || '' }}
            ${{ matrix.os == 'macos' && 'src-tauri/target/release/bundle/macos/liuyao-desktop*_macos*.app.tar.gz' || '' }}
          tag_name: ${{ github.ref_name }}_${{ matrix.os }}_${{ matrix.arch }}
          name: liuyao_desktop_${{ github.ref_name }}_${{ matrix.os }}_${{ matrix.arch }}
          draft: true
          prerelease: false
          make_latest: true
          generate_release_notes: true
          append_body: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Upload build logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            src-tauri/target/release/build.log
            ~/.cargo/registry/cache/
          retention-days: 7